#pragma once

#include <string>
#include "../Math/Source/Vector3.h"

struct D3DXMATRIX;
class Quaternion;

class Matrix
{
	//	열 (Col) / 이를 4개로 만들어 행 (Row)를 만든다.
	struct Column
	{
		Column() noexcept
			:c_1(0.0f), c_2(0.0f), c_3(0.0f), c_4(0.0f)
		{ }

		inline float& operator[](unsigned int index) noexcept
		{
			return c[index];
		}

		union
		{
			float c[4];

			struct
			{
				float c_1;
				float c_2;
				float c_3;
				float c_4;
			};
		};
	};
	///////////////////////////////////////////////////////////////////////////
public:
	explicit Matrix(bool identity = false) noexcept;
	explicit Matrix(const Vector3& right, const Vector3& up, const Vector3& forward, const Vector3& position, float size = 1.0f) noexcept;
	explicit Matrix(const Vector3& right, const Vector3& up, const Vector3& forward, const Vector3& position, const Vector3& size) noexcept;
	explicit Matrix(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44) noexcept;

	//	Float 배열(16) 으로 생성
	explicit Matrix(float* arr_16) noexcept;

	Matrix(const Matrix& other) noexcept;
	Matrix(Matrix&& other) noexcept;
	//
	///////////////////////////////////////////////////////////////////////////////

	inline Column& operator [](unsigned int index) noexcept
	{
		return m[index];
	}

	inline Matrix operator =(const Matrix& other) noexcept
	{
		memcpy(this, &other, sizeof(other));
		return *this;
	}

	inline Matrix operator -() noexcept
	{
		return Matrix(-m_11, -m_12, -m_13, -m_14, -m_21, -m_22, -m_23, -m_24, -m_31, -m_32, -m_33, -m_34, -m_41, -m_42, -m_43, -m_44);
	}

	inline bool operator ==(const Matrix& other) const noexcept
	{
		for (unsigned int i = 0; i < 16; i++)
			if (data[i] != other.data[i])
				return false;

		return true;
	}

	inline bool operator !=(const Matrix& other) const noexcept
	{
		for (unsigned int i = 0; i < 16; i++)
			if (data[i] == other.data[i])
				return false;

		return true;
	}

	//	변환
	operator float*() const noexcept;

	//	연산자

	Matrix operator +(const Matrix& other) const noexcept;
	Matrix operator +(const float& other) const noexcept;
	Matrix operator -(const Matrix& other) const noexcept;
	Matrix operator -(const float& other) const noexcept;
	Matrix operator *(const Matrix& other) const noexcept;
	Matrix operator *(const float& other) const noexcept;
	Matrix operator /(const Matrix& other) const noexcept;
	Matrix operator /(const float& other) const noexcept;

	void operator +=(const Matrix& other) noexcept;
	void operator +=(const float& other) noexcept;
	void operator -=(const Matrix& other) noexcept;
	void operator -=(const float& other) noexcept;
	void operator *=(const Matrix& other) noexcept;
	void operator *=(const float& other) noexcept;
	void operator /=(const Matrix& other) noexcept;
	void operator /=(const float& other) noexcept;

	friend Matrix operator +(const float& factor, const Matrix& other)
	{
		return other + factor;
	}
	friend Matrix operator *(const float& factor, const Matrix& other)
	{
		return other * factor;
	}

	///////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스의 값들을 String으로 변환합니다.
	///////////////////////////////////////////////////////////////////////////////
	std::string ToString();

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스의 값들을 Wstring으로 변환합니다.
	///////////////////////////////////////////////////////////////////////////////
	std::wstring ToStringW();

	///////////////////////////////////////////////////////////////////////////////
	//	Matrix 를 D3DXMATRIX 로 변환합니다.
	///////////////////////////////////////////////////////////////////////////////
	D3DXMATRIX ToD3DXMATRIX();


	///////////////////////////////////////////////////////////////////////////////
	//	행렬식
	///////////////////////////////////////////////////////////////////////////////
	float Determinant();

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스의 (기하학적)크기를 구합니다.
	///////////////////////////////////////////////////////////////////////////////
	Vector3 GetScale();

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스의 (기하학적)위치를 구합니다.
	///////////////////////////////////////////////////////////////////////////////
	inline const Vector3& GetPosition() const
	{
		return m_position;
	}

	
	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스의 위치를 정하고 자기자신을 반환합니다.
	///////////////////////////////////////////////////////////////////////////////
	const Matrix& SetPosition(const Vector3& position);

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스의 위치를 정하고 자기자신을 반환합니다.
	///////////////////////////////////////////////////////////////////////////////
	const Matrix& SetPosition(float xPosition, float yPosition, float zPosition);


	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스를 X축으로 회전시킵니다.
	///////////////////////////////////////////////////////////////////////////////
	const Matrix& SetRotationX(float radian);

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스를 Y축으로 회전시킵니다.
	///////////////////////////////////////////////////////////////////////////////
	const Matrix& SetRotationY(float radian);

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스를 Z축으로 회전시킵니다.
	///////////////////////////////////////////////////////////////////////////////
	const Matrix& SetRotationZ(float radian);

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스를 axis축으로 회전시킵니다.
	///////////////////////////////////////////////////////////////////////////////
	const Matrix& SetRotation(const Vector3& axis, float angle);

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스를 yaw(Y축) , pitch(X축) , roll(Z축) 로 회전시킵니다.
	///////////////////////////////////////////////////////////////////////////////
	const Matrix& SetRotation(float yaw, float pitch, float roll);

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스를 쿼터니언으로 회전시킵니다.
	///////////////////////////////////////////////////////////////////////////////
	const Matrix& SetRotation(const Quaternion& quaternion);


	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스의 (기하학적)크기를 정합니다.
	///////////////////////////////////////////////////////////////////////////////
	const Matrix& SetScale(const Vector3& scale);
	const Matrix& SetScale(float xScale, float yScale, float zScale);
	const Matrix& SetScale(float scale);

	///////////////////////////////////////////////////////////////////////////////
	//	매트릭스의 방향들 , (기하학적)크기를 정규화합니다. ( 1 , 1 , 1 )
	///////////////////////////////////////////////////////////////////////////////
	const Matrix& ScaleNormalize();


	///////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////
	//	Position 매트릭스를 생성합니다.
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreatePosition(const Vector3& position);
	static Matrix CreatePosition(float xPosition, float yPosition, float zPosition);

	///////////////////////////////////////////////////////////////////////////////
	//	Scale 매트릭스를 생성합니다.
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreateScale(const Vector3& scale);
	static Matrix CreateScale(float xScale, float yScale, float zScale);
	static Matrix CreateScale(float scale);

	///////////////////////////////////////////////////////////////////////////////
	//	X축으로 회전시킨 매트릭스를 생성합니다.
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreateRotationX(float radian);

	///////////////////////////////////////////////////////////////////////////////
	//	Y축으로 회전시킨 매트릭스를 생성합니다.
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreateRotationY(float radian);

	///////////////////////////////////////////////////////////////////////////////
	//	Z축으로 회전시킨 매트릭스를 생성합니다.
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreateRotationZ(float radian);

	///////////////////////////////////////////////////////////////////////////////
	//	axis축으로 회전시킨 매트릭스를 생성합니다.
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreateFromAxisAngle(const Vector3& axis, float angle);

	///////////////////////////////////////////////////////////////////////////////
	//	쿼터니언으로 회전시킨 매트릭스를 생성합니다.
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreateFromQuaternion(const Quaternion& quaternion);

	///////////////////////////////////////////////////////////////////////////////
	//	yaw(Y축) , pitch(X축) , roll(Z축) 로 회전시킨 매트릭스를 생성합니다.
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreateFromYawPitchRoll(float yaw, float pitch, float roll);

	//	World 매트릭스를 생성합니다.
	static Matrix CreateWorld(const Vector3& position, const Vector3& forward, const Vector3& up, const Vector3& scale);

	///////////////////////////////////////////////////////////////////////////////

	//	View

	///////////////////////////////////////////////////////////////////////////////
	//	원근 투영 매트릭스를 생성합니다. (왼손 좌표계)
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreatePerspective(float fov, float width, float height, float nearPlane = 0.01f, float farPlane = 10000.0f);

	///////////////////////////////////////////////////////////////////////////////
	//	직교 투영 매트릭스를 생성합니다. (왼손 좌표계)
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreateOrthographic(float width, float height, float nearPlane = 0.01f, float farPlane = 10000.0f);

	///////////////////////////////////////////////////////////////////////////////
	//	뷰 매트릭스를 생성합니다. (왼손 좌표계)
	///////////////////////////////////////////////////////////////////////////////
	static Matrix CreateView_LookTarget(const Vector3& cameraPosition, const Vector3& cameraTarget, const Vector3& cameraUpVector);
	static Matrix CreateView_LookVector(const Vector3& cameraPosition, const Vector3& cameraForwardVector, const Vector3& cameraUpVector);
	//
	
	///////////////////////////////////////////////////////////////////////////////
	//	쿼터니언으로 매트릭스를 변환시킵니다.
	///////////////////////////////////////////////////////////////////////////////
	static Matrix Transform(const Matrix& value, const Quaternion& rotation);
	
	///////////////////////////////////////////////////////////////////////////////
	//	전치 행렬
	///////////////////////////////////////////////////////////////////////////////
	static Matrix Transpose(const Matrix& matrix);
	
	///////////////////////////////////////////////////////////////////////////////
	//	역행렬
	///////////////////////////////////////////////////////////////////////////////
	static Matrix Invert(const Matrix& matrix);
	
	///////////////////////////////////////////////////////////////////////////////
	//	선형 보간
	///////////////////////////////////////////////////////////////////////////////
	static Matrix Lerp(const Matrix& matrix1, const Matrix& matrix2, float amount);
	
	///////////////////////////////////////////////////////////////////////////////
	//	회전 구면보간 , 위치 선형보간
	///////////////////////////////////////////////////////////////////////////////
	static Matrix Interpolation(const Matrix& matrix1, const Matrix& matrix2, float amount);

public:
	const static Matrix Identity;

	///////////////////////////////////////////////////////////////////////////
	///	M 11 ~ 44
	union
	{
		Column m[4];
		float data[16];

		struct
		{
			union
			{
				Vector3 m_right;
				struct
				{
					float m_11;
					float m_12;
					float m_13;
				};
			};
			float m_14;

			union
			{
				Vector3 m_up;
				struct
				{
					float m_21;
					float m_22;
					float m_23;
				};
			};
			float m_24;

			union
			{
				Vector3 m_forward;
				struct
				{
					float m_31;
					float m_32;
					float m_33;
				};
			};
			float m_34;

			union
			{
				Vector3 m_position;
				struct
				{
					float m_41;
					float m_42;
					float m_43;
				};
			};
			float m_44;
		};
	};
	///////////////////////////////////////////////////////////////////////////
};
