#include <math.h>
//
#include "RandomHelper.h"

#include "Vector2.h"
#include "Vector3.h"
#include "Vector4.h"

//////////////////////////////////////////////////////////////////////////

Random RandomHelper::randomGenerator = Random((int)GetTickCount());

//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 생성자
//////////////////////////////////////////////////////////////////////////
RandomHelper::RandomHelper(void)
{

}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 소멸자
//////////////////////////////////////////////////////////////////////////
RandomHelper::~RandomHelper(void)
{

}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief globalRandomGenerator 얻기
///@param globalRandomGenerator
//////////////////////////////////////////////////////////////////////////
Random RandomHelper::GenerateNewRandom()
{
	return randomGenerator;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 랜덤 정수 추출
///@param max : 최대값
///@return : 결과 정수
//////////////////////////////////////////////////////////////////////////
int RandomHelper::RandomInt(int max)
{
	return randomGenerator.Next(max);
}
int RandomHelper::RandomInt(int min, int max)
{
	return randomGenerator.Next(min, max);
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 랜덤 실수 추출
///@param min : 최소값
///@param max : 최대값
///@return : 결과 실수
//////////////////////////////////////////////////////////////////////////
float RandomHelper::RandomFloat(float min, float max)
{
	return (float)randomGenerator.NextDouble() * (max - min) + min;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 랜덤 바이트 추출
///@param min : 최소값
///@param max : 최대값
///@return : 결과 바이트
//////////////////////////////////////////////////////////////////////////
char RandomHelper::RandomByte(char min, char max)
{
	return (byte)(randomGenerator.Next(min, max));
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 랜덤 벡터 생성
///@param min : 각 요소의 최소값
///@param max : 각 요소의 최대값
///@return 결과 벡터
//////////////////////////////////////////////////////////////////////////
Vector2 RandomHelper::RandomVector2(float min, float max)
{
	return Vector2(RandomFloat(min, max), RandomFloat(min, max));
}

Vector3 RandomHelper::RandomVector3(float min, float max)
{
	return Vector3(RandomFloat(min, max), RandomFloat(min, max), RandomFloat(min, max));
}

Vector4 RandomHelper::RandomVector4(float min, float max)
{
	return Vector4(RandomFloat(min, max), RandomFloat(min, max), RandomFloat(min, max), RandomFloat(min, max));
}

//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 랜덤 벡터 생성
///@return 결과 벡터
//////////////////////////////////////////////////////////////////////////
Vector2 RandomHelper::RandomNormalVector2()
{
	Vector2 randomNormalVector = Vector2(RandomFloat(-1.0f, 1.0f), RandomFloat(-1.0f, 1.0f));
	randomNormalVector.Normalize();

	return randomNormalVector;
}

Vector3 RandomHelper::RandomNormalVector3()
{
	Vector3 randomNormalVector = Vector3(RandomFloat(-1.0f, 1.0f), RandomFloat(-1.0f, 1.0f), RandomFloat(-1.0f, 1.0f));
	randomNormalVector.Normalize();

	return randomNormalVector;
}

Vector4 RandomHelper::RandomNormalVector4()
{
	Vector4 randomNormalVector = Vector4(RandomFloat(-1.0f, 1.0f), RandomFloat(-1.0f, 1.0f), RandomFloat(-1.0f, 1.0f), RandomFloat(-1.0f, 1.0f));
	randomNormalVector.Normalize();

	return randomNormalVector;
}
